
#version 450


struct VertexIn{
	vec4 pos; // w as skinIndex
	vec4 normal; // w not used
	vec4 color;  
	vec4 joint0;
	vec4 weight0;
	vec4 tangent;
	vec2 uv;
};

struct VertexOut{
	vec4 pos; // w as skinIndex
	vec4 normal; // w not used
	vec4 color;
	vec4 tangent;
	vec2 uv;
};

struct MeshMatrices{
	mat4 nodeMatrix;
	mat4 jointMatrices[64];
	vec4 jointCount;
};

struct ParticleCalculate{
	vec4 prevPos;
	vec4 vel;
	vec4 corr;	
};

struct ParticleRender{
	vec4 pos;
	vec4 normal;
	vec2 uv;
};

struct DistConstraint{
	ivec2 constIds;
	float restLength;
};

layout (std140, set = 0, binding = 0) uniform ComputeUbo
{
	vec4 clickData;
	vec4 gravity;
	ivec2 particleCount;
	float dt;
	float stiffness;
	float alpha;
	float jacobiScale;
	float thickness;
	float radius;
	float friction;
	bool solveType;
} computeUbo;

layout (std430, set = 1, binding = 0) readonly buffer VertexInSSBO{
	VertexIn verticesIn[ ];
};

layout (set = 2, binding = 0) uniform ModelUbo 
{
	mat4 modelMatrix;
	vec4 modelColor;
} modelUbo;


layout (std430, set = 3, binding = 0) readonly buffer SkinSSBO{
	MeshMatrices meshMatrices[ ];
};
// animation output, used in cloth calculation
layout (std430, set = 3, binding = 1) readonly buffer VertexOutSSBO{
	VertexOut verticesOut[ ];
};

layout (std430, set = 4, binding = 0) buffer CalculateParticleSSBO{
	ParticleCalculate calculateParticles[ ];
};

layout (std430, set = 4, binding = 1) buffer RenderParticleSSBO{
	ParticleRender renderParticles[ ];
};

layout (std430, set = 5, binding = 0) buffer DistConstraintSSBO{
	DistConstraint distConstraints[ ];
};

layout (constant_id = 0) const int SHARED_DATA_SIZE = 512;
layout (constant_id = 1) const int COMPUTE_TYPE = 0;
layout (local_size_x_id = 2) in;
layout (local_size_y_id = 3) in;
layout (local_size_z_id = 4) in;

const uint kIntegrate = 0;
const uint kSolveCollision = 1;
const uint kSolveDistanceConstraints = 2;
const uint kUpdateVel = 3;
const uint kUpdateMesh = 4;
const uint kInitialize = 5;

void integrate(in uint xIdx){
	if (xIdx >= calculateParticles.length()) {
		return;	
	}
		
	calculateParticles[xIdx].vel += computeUbo.gravity * computeUbo.dt;
	renderParticles[xIdx].pos += calculateParticles[xIdx].vel * computeUbo.dt;

	// floor collision
	if(renderParticles[xIdx].pos.y > -computeUbo.thickness){
		vec3 p = renderParticles[xIdx].pos.xyz * (1.0 - computeUbo.friction) + calculateParticles[xIdx].prevPos.xyz * computeUbo.friction;
		renderParticles[xIdx].pos.xyz = vec3(p.x, -computeUbo.thickness, p.z);
	}
}

void solveCollision(in uint xIdx, in uint yIdx){
	if (xIdx >= calculateParticles.length()) {
		return;	
	}
	if(yIdx >= verticesOut.length()){
		return;
	}

	float d = distance(verticesOut[yIdx].pos.xyz, renderParticles[xIdx].pos.xyz);
	if(d < computeUbo.radius + computeUbo.thickness){
		renderParticles[xIdx].pos.y = verticesOut[yIdx].pos.y -(computeUbo.radius + computeUbo.thickness);
		return;
		vec3 p = renderParticles[xIdx].pos.xyz * (1.0 - computeUbo.friction) + calculateParticles[xIdx].prevPos.xyz * computeUbo.friction;
		vec3 r = normalize(p - verticesOut[yIdx].pos.xyz);
		renderParticles[xIdx].pos.xyz = renderParticles[xIdx].pos.xyz + r * (computeUbo.radius + computeUbo.thickness);
	}

}
void main() 
{
	// Current SSBO index
	uint xIdx = gl_GlobalInvocationID.x;
	uint yIdx = gl_GlobalInvocationID.y;
	uint zIdx = gl_GlobalInvocationID.z;
	// should not return early for barrier

	if(COMPUTE_TYPE == kIntegrate){
		integrate(xIdx);
	}else if(COMPUTE_TYPE == kSolveCollision){
		solveCollision(xIdx, yIdx);
	}
}