
#version 450

struct Particle
{
	vec4 pos;
	vec4 vel;
	vec4 pk[4];
	vec4 vk[4];
};

// Binding 0 : Position storage buffer prev frame
layout(std140, binding = 0) readonly buffer SSBOIn
{
   Particle particlesIn[ ];
};

// Binding 1 : Position storage buffer
layout(std140, binding = 1) buffer SSBO
{
   Particle particles[ ];
};

layout (local_size_x = 256) in;

layout (binding = 2) uniform UBO 
{
	float dt;
	int particleCount;
} ubo;

//layout (constant_id = 0) const int SHARED_DATA_SIZE = 512;
// TODO: check being greater than local group size intended for calculation and approximation.
const int SHARED_DATA_SIZE = 256;
layout (constant_id = 1) const float GRAVITY = 0.002;
layout (constant_id = 2) const float POWER = 0.75;
layout (constant_id = 3) const float SOFTEN = 0.0075;
layout (constant_id = 4) const int INTEGRATOR = 0;
layout (constant_id = 5) const int INTEGRATE_STEP = 0;


// Share data between computer shader invocations to speed up caluclations
shared vec4 sharedData[SHARED_DATA_SIZE];

void stepInput(in Particle particle, out vec4 outPos, out vec4 outVel){
	if (INTEGRATOR <= 4){
		if (INTEGRATE_STEP == 1){
			outPos = particle.pos;
			outVel = particle.vel;
		}else if (INTEGRATE_STEP == 2){
			outPos = particle.pos + 0.5 * particle.pk[0];
			outVel = particle.vel + 0.5 * particle.vk[0];
		}else if (INTEGRATE_STEP == 3){
			outPos = particle.pos + 0.5 * particle.pk[1];
			outVel = particle.vel + 0.5 * particle.vk[1];
		}else if (INTEGRATE_STEP == 4){
			outPos = particle.pos + particle.pk[2];
			outVel = particle.vel + particle.vk[2];
		}
	} else if(INTEGRATOR == 5){
		outPos = particle.pos;
		outVel = particle.vel;
	} else if(INTEGRATOR == 6){
		if (INTEGRATE_STEP == 1){
			outPos = particle.pos;
			outVel = particle.vel;
		}else if (INTEGRATE_STEP == 2){
			outPos = particle.pk[0];
			// not used
			outVel = particle.vk[0];
		}
	}
	outPos.w = particle.pos.w;
}

void main() 
{
	// Current SSBO index
	uint index = gl_GlobalInvocationID.x;
	// should not return early for barrier
	// if (index >= ubo.particleCount) 
	// 	return;	

	vec4 position; 
	vec4 velocity; 
	stepInput(particlesIn[index], position, velocity);
	vec4 acceleration = vec4(0.0);

	for (int i = 0; i < ubo.particleCount; i += SHARED_DATA_SIZE)
	{
		if (i + gl_LocalInvocationID.x < ubo.particleCount)
		{
			vec4 otherPos;
			vec4 otherVel;
			stepInput(particlesIn[i + gl_LocalInvocationID.x], otherPos, otherVel);
			sharedData[gl_LocalInvocationID.x] = otherPos;
		}
		else
		{
			// 0.0 mass -> no effect
			sharedData[gl_LocalInvocationID.x] = vec4(0.0);
		}

		memoryBarrierShared();
		barrier();

		for (int j = 0; j < gl_WorkGroupSize.x; j++)
		{
			vec4 other = sharedData[j];
			vec3 r = other.xyz - position.xyz;
			acceleration.xyz +=  (GRAVITY * other.w / pow(dot(r, r) + SOFTEN, POWER)) * r;
		}

		// memoryBarrierShared();
		barrier();
	}

	if(INTEGRATOR == 6){
		// pk1 not used.
		particles[index].pk[INTEGRATE_STEP-1].xyz = position.xyz + 
			ubo.dt * velocity.xyz + 
			0.5 * ubo.dt * ubo.dt * acceleration.xyz; 
		particles[index].vk[INTEGRATE_STEP-1].xyz = ubo.dt * acceleration.xyz;
	}else{
		// RK step output
		particles[index].pk[INTEGRATE_STEP-1].xyz = ubo.dt * velocity.xyz; 
		particles[index].vk[INTEGRATE_STEP-1].xyz = ubo.dt * acceleration.xyz;
	}
}