
#version 450

struct Particle
{
	vec4 pos;
	vec4 vel;
	vec4 pk[4];
	vec4 vk[4];
	vec4 attractionIndex;
	vec4 attractionWeight;
};

// Binding 0 : Position storage buffer prev frame
layout(std430, binding = 0) readonly buffer SSBOIn
{
   Particle particlesIn[ ];
};

// Binding 1 : Position storage buffer
layout(std430, binding = 1) buffer SSBO
{
   Particle particles[ ];
};

layout (binding = 2) uniform UBO 
{
	vec4 clickData;
	float dt;
	int particleCount;
	float gravity;
	float power;
	float soften;
} ubo;

layout (constant_id = 1) const int INTEGRATOR = 0;
layout (constant_id = 2) const int INTEGRATE_STEP = 0;
layout (local_size_x_id = 3) in;

void main() 
{
	// Current SSBO index
	uint index = gl_GlobalInvocationID.x;
	if (index >= ubo.particleCount) 
		return;	

	
	// euler method
	particles[index].pos.xyz = particlesIn[index].pos.xyz + particles[index].pk[0].xyz;
	particles[index].vel.xyz = particlesIn[index].vel.xyz + particles[index].vk[0].xyz;
}