
#version 450

struct Particle
{
	vec4 pos;
	vec4 vel;
	vec4 pk[4];
	vec4 vk[4];
	vec4 attractionWeight;
};

struct TailElt
{
	vec4 pos;
};

// Binding 0 : Position storage buffer prev frame
layout(std430, binding = 0) readonly buffer SSBOIn
{
   Particle particlesIn[ ];
};

// Binding 1 : Position storage buffer
layout(std430, binding = 1) buffer SSBO
{
   Particle particles[ ];
};

layout (binding = 2) uniform UBO 
{
	vec4 clickData;
	float dt;
	int particleCount;
	float gravity;
	float power;
	float soften;
	float tailTimer;
	uint tailSize;
} ubo;


layout(std430, binding = 3) readonly buffer TailSSBOIn
{
   TailElt tailsIn[ ];
};

layout(std430, binding = 4) buffer TailSSBO
{
   TailElt tails[ ];
};

layout (constant_id = 1) const int INTEGRATOR = 0;
layout (constant_id = 2) const int INTEGRATE_STEP = 0;
layout (local_size_x_id = 3) in;

void main() 
{
	// Current SSBO index
	uint index = gl_GlobalInvocationID.x;
	if (index >= ubo.particleCount) 
		return;	

	if (INTEGRATOR == 1){
		// euler method
		particles[index].pos.xyz = particlesIn[index].pos.xyz + particles[index].pk[0].xyz;
		particles[index].vel.xyz = particlesIn[index].vel.xyz + particles[index].vk[0].xyz;
	} else if(INTEGRATOR == 2){
		// midpoint method
		particles[index].pos.xyz = particlesIn[index].pos.xyz + particles[index].pk[1].xyz;
		particles[index].vel.xyz = particlesIn[index].vel.xyz + particles[index].vk[1].xyz;
	} else if(INTEGRATOR == 4){
		// RK4 integrate
		particles[index].pos.xyz = particlesIn[index].pos.xyz + (
			particles[index].pk[0].xyz + 
			2.0 * particles[index].pk[1].xyz + 
			2.0 * particles[index].pk[2].xyz + 
			particles[index].pk[3].xyz
		) / 6.0;

		particles[index].vel.xyz = particlesIn[index].vel.xyz + (
			particles[index].vk[0].xyz + 
			2.0 * particles[index].vk[1].xyz + 
			2.0 * particles[index].vk[2].xyz + 
			particles[index].vk[3].xyz
		) / 6.0;
	}else  if(INTEGRATOR == 5){
		// euler symplecitc method
		particles[index].vel.xyz = particlesIn[index].vel.xyz + particles[index].vk[0].xyz;
		particles[index].pos.xyz = particlesIn[index].pos.xyz + ubo.dt * particles[index].vel.xyz;
	}else  if(INTEGRATOR == 6){
		// verlet method
		particles[index].pos.xyz = particles[index].pk[1].xyz;
		particles[index].vel.xyz = particles[index].vk[1].xyz; 
	}else if(INTEGRATOR == 8){
		// ruth or yoshida, 4th-order symplectic
		particles[index].pos.xyz = particles[index].pk[3].xyz;
		particles[index].vel.xyz = particles[index].vk[3].xyz;
	}
	// tail update in compute shader
	// TOOD: tailSize 0
	if(ubo.tailTimer == 0.0){
		for(int i=0;i<ubo.tailSize-1;i++){
			tails[index*ubo.tailSize + i+1].pos = tailsIn[index*ubo.tailSize + i].pos;
		}
		tails[index*ubo.tailSize + 0].pos.xyz = particles[index].pos.xyz;
		tails[index*ubo.tailSize + 0].pos.w = particles[index].vel.w;
	}else{
		for(int i=0;i<ubo.tailSize;i++){
			tails[index*ubo.tailSize + i].pos = tailsIn[index*ubo.tailSize + i].pos;
		}
	}
}