
#version 450

struct Vertex{
	vec4 pos; // w as skinIndex
	vec4 normal; // w not used
	vec4 color;  
	vec4 joint0;
	vec4 weight0;
	vec4 tangent;
	vec2 uv;
};

struct Particle
{
	vec4 pos;
	vec4 vel;
	vec4 pk[4];
	vec4 vk[4];
	vec4 attractionIndex;
	vec4 attractionWeight;
};

// Binding 0 : Position storage buffer prev frame
layout(std140, set = 0, binding = 0) readonly buffer SSBOIn
{
   Particle particlesIn[ ];
};

// Binding 1 : Position storage buffer
layout(std140, set = 0, binding = 1) buffer SSBO
{
   Particle particles[ ];
};

layout (local_size_x = 256) in;

layout (set = 0, binding = 2) uniform UBO 
{
	vec4 clickData;
	float dt;
	int particleCount;
} ubo;

layout (std140, set = 1, binding = 0) readonly buffer VertexSSBO{
	Vertex vertices[ ];
};
layout (std140, set = 1, binding = 1) readonly buffer IndexSSBO{
	uint indices[ ];
};
//layout (constant_id = 0) const int SHARED_DATA_SIZE = 512;
// TODO: check being greater than local group size intended for calculation and approximation.
const int SHARED_DATA_SIZE = 256;
layout (constant_id = 1) const float GRAVITY = 0.002;
layout (constant_id = 2) const float POWER = 0.75;
layout (constant_id = 3) const float SOFTEN = 0.0075;
layout (constant_id = 4) const int INTEGRATOR = 0;
layout (constant_id = 5) const int INTEGRATE_STEP = 0;


// Share data between computer shader invocations to speed up caluclations
shared vec4 sharedData[SHARED_DATA_SIZE];


void main() 
{
	// Current SSBO index
	uint index = gl_GlobalInvocationID.x;
	// should not return early for barrier
	// if (index >= ubo.particleCount) 
	// 	return;	

	vec4 position = particlesIn[index].pos; 
	vec4 velocity = particlesIn[index].vel;; 
	vec4 acceleration = vec4(0.0);

	// vec3 targetPos = vec3(0.0, 0.0, 0.0);
	// uint modIndex = uint(mod(index, 21036));
	// uint vertIndex = indices[modIndex];
	// 4019
	// 1728
	uint modIndex = uint(mod(index, 4019));
	vec3 targetPos = 10.0 * vertices[modIndex].pos.xyz;
	float dirSign = 1.0;
	if(ubo.clickData.w == 1.0){
		targetPos = ubo.clickData.xyz;
	}else if(ubo.clickData.w == 2.0){
		targetPos = ubo.clickData.xyz;
		dirSign = -1.0;
	}
	vec3 r = targetPos-position.xyz;
	acceleration.xyz = GRAVITY * dirSign * normalize(r) * pow(dot(r, r), 1.0) - 
		SOFTEN * normalize(velocity.xyz) * pow(dot(velocity.xyz, velocity.xyz), POWER);

	
	particles[index].pk[0].xyz = ubo.dt * velocity.xyz; 
	particles[index].vk[0].xyz = ubo.dt * acceleration.xyz;

}