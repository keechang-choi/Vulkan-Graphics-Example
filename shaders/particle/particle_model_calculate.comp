
#version 450

struct Vertex{
	vec4 pos; // w as skinIndex
	vec4 normal; // w not used
	vec4 color;  
	vec4 joint0;
	vec4 weight0;
	vec4 tangent;
	vec2 uv;
};

struct Particle
{
	vec4 pos;
	vec4 vel;
	vec4 pk[4];
	vec4 vk[4];
	vec4 attractionIndex;
	vec4 attractionWeight;
};

// Binding 0 : Position storage buffer prev frame
layout(std140, set = 0, binding = 0) readonly buffer SSBOIn
{
   Particle particlesIn[ ];
};

// Binding 1 : Position storage buffer
layout(std140, set = 0, binding = 1) buffer SSBO
{
   Particle particles[ ];
};


layout (set = 0, binding = 2) uniform UBO 
{
	vec4 clickData;
	float dt;
	int particleCount;
	float gravity;
	float power;
	float soften;
} ubo;

layout (std430, set = 1, binding = 0) readonly buffer VertexSSBO{
	Vertex vertices[ ];
};
// NOTE: std140 alignment rounded up to size of vec4
layout (std430, set = 1, binding = 1) readonly buffer IndexSSBO{
	uint indices[ ];
};

layout (set = 2, binding = 0) uniform ModelUbo 
{
	mat4 modelMatrix;
	vec4 modelColor;
	uint numVertices;
	uint numIndices;
} modelUbo;

layout (constant_id = 0) const int SHARED_DATA_SIZE = 512;
// TODO: check being greater than local group size intended for calculation and approximation.
// const int SHARED_DATA_SIZE = 256;
layout (constant_id = 1) const int INTEGRATOR = 0;
layout (constant_id = 2) const int INTEGRATE_STEP = 0;

layout (local_size_x_id = 3) in;

// Share data between computer shader invocations to speed up caluclations
shared vec4 sharedData[SHARED_DATA_SIZE];


void main() 
{
	// Current SSBO index
	uint index = gl_GlobalInvocationID.x;
	// should not return early for barrier
	// if (index >= ubo.particleCount) 
	// 	return;	

	vec4 position = particlesIn[index].pos; 
	vec4 velocity = particlesIn[index].vel;; 
	vec4 acceleration = vec4(0.0);

	// vec3 targetPos = vec3(0.0, 0.0, 0.0);
	// uint modIndex = uint(mod(index, 21036));
	// uint vertIndex = indices[modIndex];
	// 4019
	// 1728
	vec3 targetPos;
	if(index < modelUbo.numVertices){
		targetPos = vertices[index].pos.xyz;
	}else{
		uint modIndex = uint(mod(index-modelUbo.numVertices, modelUbo.numIndices/3));
		vec3 p0 = vertices[indices[modIndex*3]].pos.xyz;
		vec3 p1 = vertices[indices[modIndex*3+1]].pos.xyz;
		vec3 p2 = vertices[indices[modIndex*3+2]].pos.xyz;
		// center of triangle
		vec4 attractionWeight = particlesIn[index].attractionWeight;
		targetPos = p0 + attractionWeight.x * (p1-p0) + attractionWeight.y * (p2-p0);
	}
	targetPos = (modelUbo.modelMatrix * vec4(targetPos, 1.0)).xyz;
	float dirSign = 1.0;
	if(ubo.clickData.w == 1.0){
		targetPos = ubo.clickData.xyz;
	}else if(ubo.clickData.w == 2.0){
		targetPos = ubo.clickData.xyz;
		dirSign = -1.0;
	}
	vec3 r = targetPos-position.xyz;
	acceleration.xyz = ubo.gravity * dirSign * normalize(r) * pow(dot(r, r), 0.5) - 
		ubo.soften * normalize(velocity.xyz) * pow(dot(velocity.xyz, velocity.xyz), ubo.power);

	
	particles[index].pk[0].xyz = ubo.dt * velocity.xyz; 
	particles[index].vk[0].xyz = ubo.dt * acceleration.xyz;

}