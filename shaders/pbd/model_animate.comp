
#version 450

struct VertexIn{
	vec4 pos; // w as skinIndex
	vec4 normal; // w not used
	vec4 color;  
	vec4 joint0;
	vec4 weight0;
	vec4 tangent;
	vec2 uv;
};

struct VertexOut{
	vec4 pos; // w as skinIndex
	vec4 normal; // w not used
	vec4 color;
	vec4 tangent;
	vec2 uv;
};

struct MeshMatrices{
	mat4 nodeMatrix;
	mat4 jointMatrices[64];
	vec4 jointCount;
};

layout (std430, set = 1, binding = 0) readonly buffer VertexInSSBO{
	VertexIn verticesIn[ ];
};

layout (set = 2, binding = 0) uniform ModelUbo 
{
	mat4 modelMatrix;
	vec4 modelColor;
} modelUbo;


layout (std430, set = 3, binding = 0) readonly buffer SkinSSBO{
	MeshMatrices meshMatrices[ ];
};
layout (std430, set = 3, binding = 1) writeonly buffer VertexOutSSBO{
	VertexOut verticesOut[ ];
};

layout (local_size_x_id = 3) in;

void main() 
{
	// Current SSBO index
	uint index = gl_GlobalInvocationID.x;
	// should not return early for barrier
	if (index >= verticesIn.length()) 
		return;	


	VertexIn vIn = verticesIn[index];
	int skinIndex = int(vIn.pos.w);
	VertexOut vOut;
	vOut.pos = vIn.pos;
	vOut.normal = vIn.normal;
	vOut.color = vIn.color;
	vOut.tangent = vIn.tangent;
	vOut.uv = vIn.uv;

	mat4 transform = modelUbo.modelMatrix;
	if(skinIndex >= 0){
		MeshMatrices eachSkinData = meshMatrices[skinIndex];
		vec4 inJointWeights = vIn.weight0;
		vec4 inJointIndices = vIn.joint0;
		mat4 skinMatrix = inJointWeights.x * eachSkinData.jointMatrices[int(inJointIndices.x)] +
			inJointWeights.y * eachSkinData.jointMatrices[int(inJointIndices.y)] +
			inJointWeights.z * eachSkinData.jointMatrices[int(inJointIndices.z)] +
			inJointWeights.w * eachSkinData.jointMatrices[int(inJointIndices.w)];
		transform = transform * eachSkinData.nodeMatrix * skinMatrix;
	}

	vOut.pos = transform * vec4(vIn.pos.xyz, 1.0);
	vOut.normal = normalize(inverse(transpose(transform)) * vec4(vIn.normal.xyz, 0.0));
	float w = vIn.tangent.w;
	vOut.tangent = normalize(transform * vec4(vIn.tangent.xyz, 0.0));
	vOut.tangent.w = w;
	
	verticesOut[index] = vOut;
}